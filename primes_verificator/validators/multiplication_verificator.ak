use aiken/collection/list
use aiken/crypto.{VerificationKeyHash}
use aiken/primitive/string
use cardano/transaction.{OutputReference, Transaction}
use ak_381/groth16.{groth_verify, SnarkVerificationKey, Proof}

pub const alpha = #"0ef324aa4ee7d710e9f45d8d420db01fb297bdaecf423c3c89ba0fa7063840059528382eeef9c1d5e9559b47bbf753635e0b287ea0e2de80387a1a79acd7ef7b4c099b652c4a208353b9d8523f99033c9b1c643f85a7ebaa9c151c878f36d34f"


validator multiplication_verificator {
    spend(
    _datum: Option<Data>,
    _redeemer: Option<Data>,
    _own_ref: OutputReference,
    _self: Transaction, 
  ) {
    let vk: SnarkVerificationKey =
    SnarkVerificationKey {
      nPublic: 1,
      vkAlpha: alpha,
      vkBeta: #"24486b9e99e108d9c1e5fdbc159852b5ee315b4b9437f6abeb805bef8879b6959a46b87faf8998fa807c595b3d1e264fc91000f9d35b87a3df9bd8be145d4dea032b8c3eecaf9be5556fc26a6f1dc58e629af3de792f7c5432ed59f9ff5d75edfecd0c4891ccab9d44ff30a65c54eb24b157305cc5a23516dccac1a8caea8c883c53a1fc37c19df73aa2d2cb72b5b98fce5228279251670bff4225878f7e51eb1e935536dbabe1fa9677a792ee0d170b8c00b202395f09ca361cce258cc2a666",
      vkGamma: #"005fe61a92d853c8a65a86f6378c87c6b5617889cfaa0e4499af62a10d32d44b122368dd32273af43d576b9a33344d3d8dde497952144decbc4989fc29a063fd07d9085bc98afafd538c51573ec2716b01adcd74b262496329db3933aa311280ff544cc5032417599924e2b344783917df221eab2379eabe614627f99daefd1d7781029549839eeb4e2e6c75c53d5d13bf7a098092a380a2a0d4427f1dcdd978a62b927d152bd871fb93bd5ea2895a60fc9123604c3b9326aa06e179e54b8e42",
      vkDelta: #"03b0e455cdb64e8155b00d797a7315fd42c8f3eaad99aa89c612ebe870eb8aa4fa7d63155b7bc7ca5db5a4dd576a48fc3d755b2cb0296af9296e3199ba234500ed4b2053c903c7535b5c188b1746392dbcd1429187b25078a5ba559e4bb25b78274ace01c663519cb65556760fbd114b6703342567654454cf612aec7f1e241a48c681db76348c7bd29fdf8a30e88de81c214e978435c489ae0ec6da8eb78f791dbb929a0eaaaac4e100c1f0642ce5c3fcbee16bc0f6f5c58b8c791c43f9ad02",
      vkAlphaBeta: [
        #"02ba1d10814a271b1f633c5b090bfcce021e1d1d482d92fd4cea5bda00146d78cdc2da1bd7399debf138a349d8c395738705fa64519d69b8d0d77a5ba08998b3c31b621d7df0bc2af63470af2f4616f3553e4c8a201552dec5d2c772fbdad9ad165989f74d519deab6bfc5f548685a0114b69864b875dadc6000fa09d7eaa8b9c5f749f53cca656488015197820b704fb0a6b76a2005df3683a6b08b852ce8be4557676cd7c3f18bde4f461c62b4c4b5f21701d55c57d21f1e71dc8329583933103b27b10961ad3c19c168c65c20965024fcd5bedf35c7c6a5fd18e88b98f40669b9baa584fa1c53da14072856eb283eac05df9dc5b2d76ca29b3f9e778d04a87ca44cc2a959dba4162e4fcee3ed017edb6804b0d68251f443742110237a",
        #"08192864b5e5f5c16cf4d25a8f91530b338efbc7c0fcd349912914c0cf209a561d86e15daf5989d3c9742c4bb86b50204c3d979c01ad8e721f6f4ee85189a4bf0df17fd5ddd9bf873b5bb641b14c8857bb594f335de0304f648c892aba85d8255817fd8b9b6e9849ea2823d5bb0f4833711af646155995e6e64f1c8a0204be682a27b16cd481c3e04b3a9c87fcd93c0add8d748bac5c4b8698e3822f07316f16d9a69f0c0da70c9eaf910e948a3e0f2fc10c2430f210a87753d60174db445c690cd74e54d65e328f98d32eb7f45dacd1370fbf064b5dbe2ebb23fc6e272206277ac7b5ae760b8464058b00b4d77f1c53895a9bc631df20b422b13210d2f62108e6c2354c8dccaa557d5950d72d20653e5475f592ac030e7d004bdf53b43b",
      ],
      vkIC: [
        #"0cd7e7a1c1797a134ca865f98be04fd0b9308d6fbc2f4a2a755ccbf22baed8e43d69f708f4564547595b11be55f60172f85df074eeb0f0809501a26bb63edd1e9ad267005fa3caa3ee083e5efb39252e0740dbadbf0a84d887ed7d677c9d55a6"
        #"c97ef91f54cd0dadaec0e7170eeae7d95a362e885f0d364a5345045e52a61d592643c455146325e66e3c2a74b8265973395370d729fdb746fb62b814e438cacb7feadab4c98338138024db1f0055d79f0051c2b1b46cc4f755109605452ceb13",
      ],
    }

  //  Template of Proof
  let pk: Proof =
    Proof {
      piA: #"39b2894dfa651bc43830d3c350f029cf8fca57579e4ca9030d2d7baed3c795f3af90ad496c1db3597e6c5e73bed5b32007f1ca89f828873535291195add33296d5db08764a28e8ca423e38056a775feac3554c7426621cc172edd29be8625c49",
      piB: #"04003989e4bdeea93016c4d5329eb7b10120cd477506f0ee8d776f39169bd49b160650b39ba5aab41476e5b1dc8b08a6f5d525e9a6a85efc95ca6d52ed495cd5f79ec6d46a44b43fb587f8979fdd29e17d507bd1ef597f648f19e77fb0a3cd96c273ca13c347b69c148794596556e1d51e90b463ac30f9b3301a5c4be1e2728183796e33bfa9815e5b0ad217db97f1e7614c8f207f3f495fa85e17a606eb94a82d0fccebe7e4f103e1282a8afd0cb740c99110714a05c324678ab7f2a376a38a",
      piC: #"15717b6afd7ed2069d42007e51d4222bfc0d23198eb238a62dd2cded47e0e30e279f95af477a5b96ca0ee91a34c5bbaef749c3517b98c5466cdb38daab5bf55afd4ba0234ae15c5deded170f086ab4eb1b4de668efacf97d8c275ceadd0aa6f9",
    }
  // Template of public values
  let public_values: List<Int> =
    [42]

  groth_verify(vk, pk, public_values)
  }
}

test multiplication_verificator_test() {
 
  let placeholder_utxo = OutputReference { transaction_id: "", output_index: 0 }
 
  multiplication_verificator.spend(
    None,
    None,
    placeholder_utxo,
    transaction.placeholder,
  )
}